generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

generator zod {
  provider = "zod-prisma-types"
  output   = "../src/schemas"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Member {
  id             Int      @id @default(autoincrement())
  email          String   @unique @db.VarChar(255)
  name           String   @db.VarChar(20)
  password       String   @db.VarChar(88)
  joined_at      DateTime @default(now())
  reported_count Int      @default(0)

  posts              Post[]
  authoredChatRooms  ChatRoom[] @relation("AuthoredRooms")
  requestedChatRooms ChatRoom[] @relation("RequestedRooms")
  sentChats          Chat[]     @relation("SentChats")
  receivedChats      Chat[]     @relation("ReceivedChats")
  createdReports     Report[]   @relation("CreatedReports") // 신고 내역 (신고자 기준)
  reportedReports    Report[]   @relation("ReportedReports")

  @@map("members")
}

model Post {
  id         Int      @id @default(autoincrement())
  author_id  Int
  title      String   @db.VarChar(255)
  content    String
  created_at DateTime @default(now())
  expires_at DateTime

  author   Member     @relation(fields: [author_id], references: [id])
  chatroom ChatRoom[]
  marker   Marker?    @relation("PostMarker")
  reports  Report[]

  @@map("posts")
}

model Marker {
  id        Int   @id @default(autoincrement())
  post_id   Int   @unique
  latitude  Float
  longitude Float

  post Post @relation("PostMarker", fields: [post_id], references: [id])

  @@map("markers")
}

model ChatRoom {
  id                 Int      @id @default(autoincrement())
  post_id            Int
  author_id          Int
  requester_id       Int
  created_at         DateTime @default(now())
  author_nickname    String   @db.VarChar(20)
  requester_nickname String   @db.VarChar(20)

  post      Post     @relation(fields: [post_id], references: [id])
  author    Member   @relation("AuthoredRooms", fields: [author_id], references: [id])
  requester Member   @relation("RequestedRooms", fields: [requester_id], references: [id])
  reports   Report[]
  chats     Chat[]

  @@map("chatrooms")
}

model Chat {
  id          Int      @id @default(autoincrement())
  chatroom_id Int
  sender_id   Int
  receiver_id Int
  is_read     Boolean
  created_at  DateTime @default(now())

  chatroom ChatRoom @relation(fields: [chatroom_id], references: [id])
  sender   Member   @relation("SentChats", fields: [sender_id], references: [id])
  receiver Member   @relation("ReceivedChats", fields: [receiver_id], references: [id])

  @@map("chats")
}

model EmailVerification {
  id                  Int      @id @default(autoincrement())
  is_verified         Boolean
  verification_number String   @db.VarChar(6)
  email               String   @db.VarChar(255)
  created_at          DateTime @default(now())
  expires_at          DateTime

  @@index([email])
  @@map("verifications")
}

model Institution {
  id           Int                @id @default(autoincrement())
  name         String             @unique
  email_domain String             @unique
  is_active    Boolean            @default(true)
  created_at   DateTime           @default(now())
  updated_at   DateTime           @default(now()) @updatedAt
  bounds       InstitutionBound[]

  @@map("institutions")
}

model InstitutionBound {
  id             Int      @id @default(autoincrement())
  institution_id Int
  start_lat      Float
  start_lon      Float
  end_lat        Float
  end_lon        Float
  created_at     DateTime @default(now())
  updated_at     DateTime @default(now()) @updatedAt

  institution Institution @relation(fields: [institution_id], references: [id], onDelete: Cascade)

  @@map("institution_bounds")
}

model Report {
  id          Int        @id @default(autoincrement())
  report_type ReportType
  post_id     Int?
  chatroom_id Int?
  reporter_id Int
  reported_id Int
  created_at  DateTime   @default(now())

  post     Post?     @relation(fields: [post_id], references: [id])
  chatroom ChatRoom? @relation(fields: [chatroom_id], references: [id])
  reporter Member    @relation("CreatedReports", fields: [reporter_id], references: [id])
  reported Member    @relation("ReportedReports", fields: [reported_id], references: [id])

  @@map("reports")
}

enum ReportType {
  POST_REPORT
  CHATROOM_REPORT
}
