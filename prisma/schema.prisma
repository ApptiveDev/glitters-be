generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

generator zod {
  provider = "zod-prisma-types"
  output   = "../src/schemas"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Member {
  id            Int      @id @default(autoincrement()) @map("id")
  email         String?  @unique @map("email") @db.VarChar(255)
  name          String   @map("name") @db.VarChar(20)
  password      String   @map("password") @db.VarChar(88)
  birth         DateTime @default(now())
  joinedAt      DateTime @default(now()) @map("joined_at")
  reportedCount Int      @default(0) @map("reported_count")
  isDeactivated Boolean  @default(false) @map("is_deactivated")
  termsAccepted Boolean  @default(false) @map("terms_accepted")
  expoToken     String?  @map("expo_token") @db.VarChar(255)

  posts              Post[]
  likes              Like[]
  authoredChatRooms  ChatRoom[] @relation("AuthoredRooms")
  requestedChatRooms ChatRoom[] @relation("RequestedRooms")
  sentChats          Chat[]     @relation("SentChats")
  receivedChats      Chat[]     @relation("ReceivedChats")
  createdReports     Report[]   @relation("CreatedReports")
  reportedReports    Report[]   @relation("ReportedReports")

  @@map("members")
}

model Post {
  id            Int      @id @default(autoincrement()) @map("id")
  authorId      Int      @map("author_id")
  iconIdx       Int      @default(0) @map("icon_idx")
  title         String   @map("title") @db.VarChar(63)
  content       String   @map("content") @db.VarChar(255)
  createdAt     DateTime @default(now()) @map("created_at")
  expiresAt     DateTime @map("expires_at")
  address       String   @map("address") @db.VarChar(63)
  isDeactivated Boolean  @default(false) @map("is_deactivated")
  likeCount     Int      @default(0) @map("like_count")
  viewCount     Int      @default(0) @map("view_count")

  author   Member     @relation(fields: [authorId], references: [id])
  chatroom ChatRoom[]
  marker   Marker?
  reports  Report[]
  likes    Like[]

  @@map("posts")
}

model Like {
  id        Int      @id @default(autoincrement())
  postId    Int      @map("post_id")
  createdAt DateTime @default(now()) @map("created_at")
  memberId  Int      @map("member_id")

  member Member @relation(fields: [memberId], references: [id])
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("likes")
}

model Marker {
  id        Int   @id @default(autoincrement())
  postId    Int   @unique @map("post_id")
  latitude  Float @map("latitude")
  longitude Float @map("longitude")

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([latitude, longitude])
  @@map("markers")
}

model ChatRoom {
  id                Int      @id @default(autoincrement()) @map("id")
  postId            Int      @map("post_id")
  authorId          Int      @map("author_id")
  requesterId       Int      @map("requester_id")
  createdAt         DateTime @default(now()) @map("created_at")
  authorNickname    String   @map("author_nickname") @db.VarChar(20)
  requesterNickname String   @map("requester_nickname") @db.VarChar(20)
  isDeactivated     Boolean  @default(false) @map("is_deactivated")

  post      Post     @relation(fields: [postId], references: [id])
  author    Member   @relation("AuthoredRooms", fields: [authorId], references: [id])
  requester Member   @relation("RequestedRooms", fields: [requesterId], references: [id])
  reports   Report[]
  chats     Chat[]

  @@map("chatrooms")
}

model Chat {
  id         Int      @id @default(autoincrement()) @map("id")
  chatroomId Int      @map("chatroom_id")
  senderId   Int      @map("sender_id")
  receiverId Int      @map("receiver_id")
  isRead     Boolean  @map("is_read")
  createdAt  DateTime @default(now()) @map("created_at")
  content    String   @db.Text()

  chatroom ChatRoom @relation(fields: [chatroomId], references: [id])
  sender   Member   @relation("SentChats", fields: [senderId], references: [id])
  receiver Member   @relation("ReceivedChats", fields: [receiverId], references: [id])

  @@index(chatroomId)
  @@index(createdAt)
  @@map("chats")
}

model EmailVerification {
  id                 Int      @id @default(autoincrement()) @map("id")
  isVerified         Boolean  @map("is_verified")
  verificationNumber String   @map("verification_number") @db.VarChar(6)
  email              String   @map("email") @db.VarChar(255)
  createdAt          DateTime @default(now()) @map("created_at")
  expiresAt          DateTime @map("expires_at")

  @@index([email])
  @@map("verifications")
}

model Blacklist {
  id        Int      @id @default(autoincrement())
  email     String   @unique @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at")
  memberId  Int      @map("member_id")

  @@index([email])
  @@map("blacklists")
}

model Institution {
  id          Int                @id @default(autoincrement()) @map("id")
  name        String             @unique @map("name")
  emailDomain String             @unique @map("email_domain")
  isActive    Boolean            @default(true) @map("is_active")
  createdAt   DateTime           @default(now()) @map("created_at")
  updatedAt   DateTime           @default(now()) @updatedAt @map("updated_at")
  bounds      InstitutionBound[]

  @@map("institutions")
}

model InstitutionBound {
  id            Int      @id @default(autoincrement()) @map("id")
  institutionId Int      @map("institution_id")
  startLat      Float    @map("start_lat")
  startLon      Float    @map("start_lon")
  defaultLat    Float    @map("default_lat")
  defaultLon    Float    @map("default_lon")
  endLat        Float    @map("end_lat")
  endLon        Float    @map("end_lon")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")

  institution Institution @relation(fields: [institutionId], references: [id], onDelete: Cascade)

  @@map("institution_bounds")
}

model Report {
  id         Int        @id @default(autoincrement()) @map("id")
  reportType ReportType @map("report_type")
  postId     Int?       @map("post_id")
  chatroomId Int?       @map("chatroom_id")
  reporterId Int        @map("reporter_id")
  reportedId Int        @map("reported_id")
  createdAt  DateTime   @default(now()) @map("created_at")
  reason     String     @db.VarChar(255)

  post     Post?     @relation(fields: [postId], references: [id])
  chatroom ChatRoom? @relation(fields: [chatroomId], references: [id])
  reporter Member    @relation("CreatedReports", fields: [reporterId], references: [id])
  reported Member    @relation("ReportedReports", fields: [reportedId], references: [id])

  @@map("reports")
}

enum ReportType {
  POST_REPORT
  CHATROOM_REPORT
}
